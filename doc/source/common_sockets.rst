
******************
The sockets module
******************

.. todo:: Finish this section

The main features of the date data pull socket is:

 * **Simple single method usage.** After the class is instantiated, a single
   call to :meth:`.DateDataPullSocket.set_point` or
   :meth:`.DateDataPullSocket.set_point_now` is all that is needed to make a
   point available via the socket.
 * **Timeout safety to prevent serving obsolete data.** The class can be
   instantiated with a timeout for each measurement type. If the available
   point is too old an error message will be served.

Inheritance
-----------

The :class:`DateDataPullSocket` and :class:`DataPullSocket` classes inherit
common functionality, such as;

* Input checks
* Initialization of DATA
* Methods to start and stop the thread and reset DATA

from the :class:`CommonDataPullSocket` class, as illustrated in the
diagram below.

.. inheritance-diagram:: PyExpLabSys.common.sockets

Usage example
=============

If code already exists to retrieve the data (e.g. a driver to
interface a piece of equipment with), making the date date available via teh socket can be reduced to as little as the following:

.. code-block:: python

    from PyExpLabSys.common.sockets import DateDataSocket
    
    # Create a data socket with timeouts
    socket = DateDataSocket(['s1m1', 's1m2'], timeouts = [1.0, 0.7])
    # Start the socket server
    socket.start()

    # Main loop
    try:
        while True:
	    new_value1, new_value2 = driver.get_values()
	    socket.set_point_now('s1m1', new_value1)
	    socket.set_point_now('s1m2', new_value2)
    except KeyboardInterrupt:
        # Stop the socket server
        socket.stop()

or if it is preferred to keep track of the timestamp manually:

.. code-block:: python

    import time
    from PyExpLabSys.common.sockets import DateDataSocket
    
    # Create a data socket with timeouts
    socket = DateDataSocket(['s1m1', 's1m2'], timeouts = [1.0, 0.7])
    # Start the socket server
    socket.start()

    # Main loop
    try:
        while True:
	    now = time.time()
	    new_value1, new_value2 = driver.get_values()
	    socket.set_point('s1m1', (now, new_value1))
	    socket.set_point('s1m2', (now, new_value2))
    except KeyboardInterrupt:
        # Stop the socket server
        socket.stop()

A few things to note from the examples:

* If no port number is given to the `__init__` method, the socket will
  be formed on the default port 9000
* The two measurements have been setup to have different timeouts
  (maximum ages), but it could also be set up to be the same
* For the sockets, the codenames are purposely kept sort, to minimize
  network load. However, for safety, they should include a reference to
  the setup and the type so e.g. a *temperature* measurement on the
  *dummy* setup could be named *dum_t*.


Autogenerated module documentation
==================================

.. automodule:: PyExpLabSys.common.sockets
    :members:
    :member-order: bysource
    :special-members:
    :show-inheritance:
